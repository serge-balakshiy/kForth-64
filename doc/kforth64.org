<2021-05-03 Пн>
Заработал полностью граф и все остальное.
Ошибка была в том, что я не удалил объектные файлы.

<2021-05-02 Вс>
Так, заработала CPP_GR_privet and CPP_GR_newfrgraph
соответственно testprivet and newfrgraph
Кроме того работает рисование линии, то есть все функции из wxkforth64.cpp.
Теперь буду подключать функции для работы графа. Подключать буду по одной.
И перед этим сохраняю текущуюю версию в src-05
Возможно, для того, чтобы это заработало, надо было удалить все объектные файлы из src.
Также, я включил вывод отладочной информации in file wxkforth64.cpp
int debug = 1;

<2021-04-29 Чт>
Займемся поиском указанных двух версий.
Создамдля этого два каталога wx & g. Каталоги будут прямо в kForth-64.
Соответственно первый для того что работает в wx
Второй для рабочих версий boost::graph

В текущем каталоге src находится версия, в которой работает все, из wx. 
Рисует линию
Сохраняю это в wx с именем src-00.01 от 28.04.21

Теперь я попытаюсь внедрить в текущие файлы boost::graph
Сначала подключу все include и счетчик объектов. Протестирую
Now this work
Теперь это работает
Снова попытаюсь подключить функцию-слово newfrgraph

<2021-04-28 Ср>
На данный момент существует две версии kForth64
В первой работают слова, написанные в wxkforth64.cpp и не работают слова для работы с boost::graph
Во второй все наоборот.
Сейчас задача в том, чтобы сделать так и того и того в одном приложении
Для этого
Надо найти версию в которой работает часть, написанная в wxkforth64 и попытыться добавить в нее код из kForthVM boost::graph
Второй подход это взять версию, в которой работает boost::graph и добавить в нее код из wxkforth64


<2021-01-05 Вт>
Теперь сделаю функцию show()

<2021-01-04 Пн>
Похоже, чтослова втраиваются следующим образом.
Например слово postpone
Его объявление в 
ForthVM.h
Реализация в 
ForthVM.cpp
Далее создается OP_CODE  с именем слова и ему присваивается номер 
#define OP_POSTPONE 272
в файле fbc.h
А в файле 
ForthWords.h создается запись в таблице 
{ "POSTPONE", OP_POSTPONE,  IMMEDIATE },
Потом пристарте вызывается OpenForth(),  в которой происходит инициализация словарей. тоексть вызывается ::Initialize(), которая в свою очередь вызывает конструктор 
new ForthListEntry и далее происходит присваивание значений.
Имя слова берется из WorsTemplate. WordName
Оттуда же берется OP_CODE (OP_POSTPONE) and Precendence
Далее
int Vocabulary::Initialize( WordTemplate wt[], int n )
{
   int i, wcode;

   for (i = 0; i < n; i++)
   {
     pNewWord = new WordListEntry;...
     strcpy(pNewWord->WordName, wt[i].WordName);
     wcode = wt[i].WordCode; // OP_CODE from  ForthTemplate ForthWords[] file ForthWords.h
     pNewWord->WordCode = wcode;
     pNewWord->Precedence = wt[i].Precedence;
     pNewWord->Cfa = new byte[WSIZE+2];
     pNewWord->Pfa = NULL;
     byte* bp = (byte*) pNewWord->Cfa;
     if (wcode >> 8) {
       bp[0] = OP_CALLADDR;
       *((long int*) (bp+1)) = (long int) JumpTable[wcode]; //addr of function from JampTable
       bp[WSIZE+1] = OP_RET;
     }
     else {
       bp[0] = wcode; //OP_CODE
       bp[1] = OP_RET;
     }
     push_back(pNewWord);
   }
   return 0;
}

Таким образом, чтобы создать своё слово я должен 
- объявить функцию
- Создать её реализацию
- Присвоить ей очередной OP_CODE
- Разместить имя функции, её OP_CODE and Precedence в таблице WordsTemplate
- Разместить имя функции (её адрес) в таблице JampTable на порядковом месте, соответствующем её OP_CODE
Тогда при инициализации функция получит слово в форте и его можно будет использовать в скриптах.

Надо до конца проверить идею как добавить слово-функцию. Просто свтроить новое слово kforth64-privet в сам kForth64

Так и сделал.
В ForthVM.h объявил int CPP_fk64privet();
В ForthVM.cpp сдела реализацию 
int CPP_fk64privet(){
cout "Privet from FK64" << endl;
return 0;
}

В fbc.h определил OP_CODE
#define OP_KF64PRIVET 417
В vm64-common.s добавил
.quad L_nop, CPP_kf64privet, L_nop, L_nop # 416--419
In ForthWodrs.h 
{ "KF64PRIVET", OP_KF64PRIVET, 0 }
 И это заработало.

Добавил функцию int CPP_gprivet() in wxkforth64.cpp
и далее по той же схеме.
Заработало.

<2021-01-01 Пт>
Заработал kForth64 в составе Golly.
Это хорошая новость. Теперь следующая задача внедрить в kforth64 функции, которые будут связывать Golly и kForth54.

В ForthCompiler.h определена структура 
struct WordTemplate
{
    const char* WordName;
    word WordCode;
    byte Precedence;
};
and
struct WordListEntry
{
  char WordName[128];
  word WordCode;
  byte Precedence;
  void* Cfa;
  void* Pfa;
};
А также два класса
class WordList : public vector<WordListEntry*> 
{
public:
   WordListEntry* GetFromName( char* );
   WordListEntry* GetFromCfa( void* );
   void RemoveLastWord( void );
};

class Vocabulary : public WordList
{
public:
   const char* Name;
   Vocabulary (const char* );
   int Initialize (WordTemplate [], int);
};



<2020-12-31 Чт>
Теперь попробую запустить kForth64 непосредственно в golly

Для того, чтобы слинковать пришлось убрать из libkforth64.a файл vm64-common.o
Иначе, была ошибка линковщика повторное определение JumpTable и других.

Запустил обработку скрипта. 
Надо еще добавить две переменных для VERSION and BUILD_DATE.
Это надо сделать через Makefile.
Кроме этого надо придумать как написать в Makefile.am чтобы файл vm64-common.s не включался бы в библиотеку libkforth64.a
Сейчас я просто удаляю из Makefile строку с этим файлом.
nodist_libkforth64_a_OBJECTS =  \
	../../kForth-64/src/libkforth64_a-ForthCompiler.$(OBJEXT) \
	../../kForth-64/src/libkforth64_a-ForthVM.$(OBJEXT) \
	../../kForth-64/src/vm64.$(OBJEXT) \
	../../kForth-64/src/libkforth64_a-vmc.$(OBJEXT)

#	../../kForth-64/src/vm64-common.$(OBJEXT) \

Кроме того, необходимо убирать из списка source файл kforth.cpp
Просто преобразовываю его в kforth.tar.gz
<2020-12-25 Пт>
Приступил к встраиванию kForth-64  в golly
Создал каталог с kForth-64
Создал в нем файд mylibMakefile для того, чтобы скомпилировать и собрать как сам kforth64 так и библиотеку libkforth64.a
Внес изменения в golly/gui-wx/configure/autogen.sh, golly/gui-wx/configure/compile, Makefile.am
Переименовал (скопировал) файл mylibMakefile  в Makefile

Теперь надо создать в gui-wx фалы wxkforth64.cpp, wxkforth64.h

Это сделано.


Внес исправления в Makefile.am,  configure.ac
Для того, чтобы kForth64 мог компилироваться и собираться вместе с golly.

